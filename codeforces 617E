#include<bits/stdc++.h>
using namespace std;
#define int long long
const int N=2e5+10;
struct seg{
    int mi,lazy;
}D[N*4];
int n,q,type,x,in[4],d;
string s;
void down(int id){
    int t=D[id].lazy;
    D[id].lazy=0;

    D[id*2].mi+=t;
    D[id*2].lazy+=t;


    D[id*2+1].mi+=t;
    D[id*2+1].lazy+=t;

}
void update(int id,int l,int r,int u,int v,int val){
    if(r<u || l>v) return;
    if(u<=l && r<=v){
        D[id].mi+=val;
        D[id].lazy+=val;
        return;
    }
    down(id);

    int mid=(l+r)/2;
    update(id*2,l,mid,u,v,val);
    update(id*2+1,mid+1,r,u,v,val);
    D[id].mi=min(D[id*2].mi,D[id*2+1].mi);
}
int get(int id,int l,int r,int u,int v){
    if(r<u || l>v){
        return 1e18;
    }
    if(u<=l && r<=v){
        return D[id].mi;
    }
    down(id);
    int mid=(l+r)/2;
    return min(get(id*2,l,mid,u,v),get(id*2+1,mid+1,r,u,v));
}
signed main(){
    ios::sync_with_stdio(0);cin.tie(0);
    cin>>n;
    for(int i=0; i<n; i++){
        cin>>x;
        update(1,0,n-1,i,i,x);
    }
    cin>>q;
    getline(cin,s);
    while(q--){
        getline(cin,s);
        d=1;
        bool OK=false;
        for(char v: s){
            if(v==' '){
                ++d;
            }
            else{
                if(v=='-') OK=true;
                else{
                    in[d]=in[d]*10+(v-'0');
                }
            }
        }
        if(OK) in[d]*=-1;
        if(d<=2){
            if(in[1]<=in[2]){
                cout<<get(1,0,n-1,in[1],in[2])<<'\n';
            }
            else{
                cout<<min(get(1,0,n-1,in[1],n-1),get(1,0,n-1,0,in[2]))<<'\n';
            }
        }
        else{
            if(in[1]<=in[2]){
                update(1,0,n-1,in[1],in[2],in[3]);
            }
            else{
                update(1,0,n-1,in[1],n-1,in[3]);
                update(1,0,n-1,0,in[2],in[3]);
            }
        }
    }
}
