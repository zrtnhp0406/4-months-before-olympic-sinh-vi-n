class Solution {
public:
    priority_queue< pair<int,vector<int>> > pq;
    int ans;
     pair<int,vector<int>> x;
    int vs[200];
    int F[(1<<11)][200];
    int maxScore(vector<vector<int>>& grid) {
        
        set<vector<int>> D;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> A=grid;
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                F[(1<<(i-1))][grid[i-1][j-1]]=grid[i-1][j-1];
            }
        }
        for(int mask=0; mask<(1<<n); mask++){
            for(int i=0; i<n; i++){
                if(!((mask>>i)&1)){
                    for(int x=1; x<=100; x++){
                        for(int y=0; y<m; y++){
                            if(grid[i][y]>x) F[(mask|(1<<i))][grid[i][y]]=max(F[(mask|(1<<i))][grid[i][y]], F[mask][x]+grid[i][y]);
                            
                        }
                    }
                }
            }
        }
        for(int j=0; j<(1<<n); j++)
        for(int i=0; i<=100; i++){
            ans=max(ans,F[j][i]);
        }
        return ans;
    }
};
