#include<bits/stdc++.h>
using namespace std;
#define int long long
const int N=2e6+10;
inline int64_t gilbertOrder(int x, int y, int pow, int rotate) {
    if (pow == 0) {
        return 0;
    }
    int hpow = 1 << (pow-1);
    int seg = (x < hpow) ? (
        (y < hpow) ? 0 : 3
    ) : (
        (y < hpow) ? 1 : 2
    );
    seg = (seg + rotate) & 3;
    const int rotateDelta[4] = {3, 0, 0, 1};
    int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
    int nrot = (rotate + rotateDelta[seg]) & 3;
    int64_t subSquareSize = int64_t(1) << (2*pow - 2);
    int64_t ans = seg * subSquareSize;
    int64_t add = gilbertOrder(nx, ny, pow-1, nrot);
    ans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
    return ans;
}

struct Query {
    int l, r, idx;
    int64_t ord;

    inline void calcOrder() {
        ord = gilbertOrder(l, r, 21, 0);
    }
};
Query Q[N];
inline bool operator<(const Query &a, const Query &b) {
    return a.ord < b.ord;
}
int n,A[N],k,q,l,r,ans,D[N*2],dapan[N*2];
signed main(){
    ios::sync_with_stdio(0);cin.tie(0);
    cin>>n>>q>>k;
    for(int i=1; i<=n; i++){
        cin>>A[i];
        A[i]^=A[i-1];
    }
    for(int i=1; i<=q; i++){
        cin>>Q[i].l;
        cin>>Q[i].r;
        Q[i].l--;
        Q[i].idx=i;
        Q[i].calcOrder();
    }
    sort(Q+1,Q+q+1);
    l=1;
    r=0;
    for(int i=1; i<=q; i++){
        while(r<Q[i].r){
            r++;
            ans+=D[(A[r]^k)];
            D[A[r]]++;
        }
        while(r>Q[i].r){
            D[A[r]]--;
            ans-=D[(A[r]^k)];
            r--;
        }
        while(l<Q[i].l){
            D[A[l]]--;
            ans-=D[(A[l]^k)];
            l++;
        }
        while(l>Q[i].l){
            l--;
            ans+=D[(A[l]^k)];
            D[A[l]]++;
        }
        dapan[Q[i].idx]=ans;
    }
    for(int i=1; i<=q; i++){
        cout<<dapan[i]<<'\n';
    }
    return 0;
}
